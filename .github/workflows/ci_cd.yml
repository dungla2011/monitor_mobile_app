name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# Permissions needed for CI operations
permissions:
  contents: read

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.3'
        channel: 'stable'
        cache: true
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Verify formatting
      run: dart format --output=none --set-exit-if-changed .
      
    - name: Analyze project source
      run: flutter analyze
      
    - name: Generate mocks
      run: dart run build_runner build --delete-conflicting-outputs
      
    - name: Run unit tests
      run: flutter test --coverage
      
    - name: Check for available devices
      id: check_devices
      run: |
        devices=$(flutter devices --machine)
        echo "Available devices: $devices"
        if echo "$devices" | grep -q '"type":"device"'; then
          echo "has_device=true" >> $GITHUB_OUTPUT
        else
          echo "has_device=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Run integration tests
      if: steps.check_devices.outputs.has_device == 'true'
      run: flutter test integration_test/
      
    - name: Skip integration tests
      if: steps.check_devices.outputs.has_device == 'false'
      run: |
        echo "‚ö†Ô∏è Integration tests skipped - no physical devices available"
        echo "üí° To run integration tests locally:"
        echo "   1. Connect Android device or start iOS simulator"
        echo "   2. Run: flutter test integration_test/"
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: coverage/lcov.info
        name: flutter-coverage
        fail_ci_if_error: false

  build_web:
    name: Build Web
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.3'
        channel: 'stable'
        cache: true
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Build web
      run: flutter build web --release
      
    - name: Setup Pages
      uses: actions/configure-pages@v4
      if: github.ref == 'refs/heads/main'
      
    - name: Upload Pages artifact
      uses: actions/upload-pages-artifact@v3
      if: github.ref == 'refs/heads/main'
      with:
        path: ./build/web
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      if: github.ref == 'refs/heads/main'

  build_android:
    name: Build Android APK
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '17'
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.3'
        channel: 'stable'
        cache: true
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Build APK
      run: flutter build apk --release
      
    - name: Upload APK
      uses: actions/upload-artifact@v3
      with:
        name: monitor-app-apk
        path: build/app/outputs/flutter-apk/app-release.apk

  build_ios:
    name: Build iOS
    runs-on: macos-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.3'
        channel: 'stable'
        cache: true
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Build iOS (no signing)
      run: flutter build ios --release --no-codesign
      
    - name: Upload iOS build
      uses: actions/upload-artifact@v3
      with:
        name: monitor-app-ios
        path: build/ios/iphoneos/Runner.app

  security_scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  performance_test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.3'
        channel: 'stable'
        cache: true
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Run performance tests
      run: |
        # Add performance testing commands here
        echo "Running performance tests..."
        # flutter drive --target=test_driver/perf_test.dart

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test, build_web, build_android, build_ios, security_scan, performance_test]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.test.result == 'success' }}
      run: |
        echo "‚úÖ All tests passed successfully!"
        
    - name: Notify failure
      if: ${{ needs.test.result == 'failure' }}
      run: |
        echo "‚ùå Tests failed!"
        exit 1
